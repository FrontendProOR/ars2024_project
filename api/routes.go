package api

import (
	"net/http"
	"project/api/middleware"
	"project/handlers"

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
)

// @title Config Management API
// @version 1.0
// @description This is a sample server for managing configuration and configuration groups.
// @BasePath /

func NewRouter(configHandler *handlers.ConfigHandler, configGroupHandler *handlers.ConfigGroupHandler) *mux.Router {
	router := mux.NewRouter()

	// Serve the Swagger JSON generated by swag init
	router.PathPrefix("/swagger/").Handler(httpSwagger.Handler(
		httpSwagger.URL("/swagger/doc.json"), // The URL pointing to the doc.json file
	))

	// Combine middlewares
	withMiddlewares := func(handler http.HandlerFunc, method, endpoint string) http.HandlerFunc {
		return middleware.RateLimiter(
			Count(
				middleware.IdempotencyCheck(handler),
				method, endpoint,
			),
		).ServeHTTP
	}

	// Registration of routes for ConfigHandler
	router.HandleFunc("/configs", withMiddlewares(configHandler.Add, "POST", "/configs")).Methods("POST")
	router.HandleFunc("/configs/{name}/{version}", withMiddlewares(configHandler.Get, "GET", "/configs/{name}/{version}")).Methods("GET")
	router.HandleFunc("/configs/{name}/{version}", withMiddlewares(configHandler.Delete, "DELETE", "/configs/{name}/{version}")).Methods("DELETE")

	// Registration of routes for ConfigGroupHandler
	router.HandleFunc("/config-groups", withMiddlewares(configGroupHandler.AddGroup, "POST", "/config-groups")).Methods("POST")
	router.HandleFunc("/config-groups/{name}/{version}", withMiddlewares(configGroupHandler.GetGroup, "GET", "/config-groups/{name}/{version}")).Methods("GET")
	router.HandleFunc("/config-groups/{name}/{version}", withMiddlewares(configGroupHandler.RemoveGroup, "DELETE", "/config-groups/{name}/{version}")).Methods("DELETE")
	router.HandleFunc("/config-groups/{name}/{version}/{configName}/{configVersion}", withMiddlewares(configGroupHandler.AddConfigToGroup, "POST", "/config-groups/{name}/{version}/{configName}/{configVersion}")).Methods("POST")
	router.HandleFunc("/config-groups/{name}/{version}/configs/{labels}/{configName}/{configVersion}", withMiddlewares(configGroupHandler.SearchConfigsWithLabelsInGroup, "GET", "/config-groups/{name}/{version}/configs/{labels}/{configName}/{configVersion}")).Methods("GET")
	router.HandleFunc("/config-groups/{name}/{version}/configs", withMiddlewares(configGroupHandler.AddConfigWithLabelToGroup, "POST", "/config-groups/{name}/{version}/configs")).Methods("POST")
	router.HandleFunc("/config-groups/{name}/{version}/configs/{labels}/{configName}/{configVersion}", withMiddlewares(configGroupHandler.RemoveConfigsWithLabelsFromGroup, "DELETE", "/config-groups/{name}/{version}/configs/{labels}/{configName}/{configVersion}")).Methods("DELETE")
	router.HandleFunc("/config-groups/{name}/{version}/configs/{configName}/{configVersion}", withMiddlewares(configGroupHandler.RemoveConfigFromGroup, "DELETE", "/config-groups/{name}/{version}/configs/{configName}/{configVersion}")).Methods("DELETE")

	// Registration of route for serving the frontend
	router.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "web/templates/app.html")
	})

	// Metrics endpoint
	router.Path("/metrics").Handler(MetricsHandler())

	return router
}
